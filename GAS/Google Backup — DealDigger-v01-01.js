// JSON visualization | viewer: http://chris.photobooks.com/json/default.htm
// function getEmailQuota(){Logger.log("Remaining email quota: " + MailApp.getRemainingDailyQuota());}
// Note: to accept doPost() from affiliate, (design decision:) must set: Publish > Deploy as web app > Execute the app as: me, Who has access to the app: Anyone, even anonymous // Otherwise, script will not run at server (though, client will receive responseCode=200); client response (200) is Google accounts sign-in page/form  // Decision Benefits: 1. script runs 2. script authorization bypass (i.e., not needed at UI) // Decision Costs: 1. Looser script security; mitigated by a. Site level access restrictions/permissions b. key method (e.g., switch/case k:foo)
function auth   (){}
function timer  (){Logger.log(new Date().getTime())}//1388228703613
function backup (){var desc="Scrape Realtor Backup — timestamp:"+new Date().getTime(),id,out=[],db=ScriptDb.getMyDb(),results=db.query({});while(results.hasNext()){out.unshift(results.next())}id=DriveApp.createFile(desc,JSON.stringify(out),MimeType.HTML).setDescription(desc);Logger.log(id);}
function print  (){var desc="Scrape Realtor Print — timestamp:"+new Date().getTime(),id,out=[],db=ScriptDb.getMyDb(),results=db.query({isRaw:false});while(results.hasNext()){out.unshift(results.next())}id=DriveApp.createFile(desc,JSON.stringify(out),MimeType.HTML).setDescription(desc);Logger.log(id);}
function size   (){var db=ScriptDb.getMyDb();Logger.log(db.query({isRaw:false}).getSize())}
function showOne(){Logger.log(JSON.stringify(ScriptDb.getMyDb().query({isRaw:false}).next()));} // Show all records in database // Reference: https://developers.google.com/apps-script/scriptdb#saving_data
function showAll(){var db=ScriptDb.getMyDb(),arr=[],r,results=db.query({});while(results.hasNext()){r=results.next();arr.push(r)}Logger.log(JSON.stringify(arr))} // Show all records in database // Reference: https://developers.google.com/apps-script/scriptdb#saving_data
//function del    (){var db=ScriptDb.getMyDb(),arr=[],r,results=db.query({xisRaw:false});while(results.hasNext()){arr.push(results.next().getId());}db.removeByIdBatch(arr,false);} // Replaced: while(results.hasNext()){r=results.next();db.remove(r);}}
//function mod    (){var db=ScriptDb.getMyDb(),arr=[],r,results=db.query({xtable:"note"/*lienPos:db.anyOf(["1st",false,db.not(db.anyValue())])*/});while(results.hasNext()){r=results.next();try{r.pctLtv=Math.round(100*r.balCur/r.estValue)}catch(e){r.pctLtv="";Logger.log(e.message)}/*r.lienPos=1;*/arr.push(r);}db.saveBatch(arr,false)}
function realtorScrape(inState,inCity){//var inState=inState||"CA",inCity=inCity||"San-Diego";//Not case-sensitive//Returns array of situs objects from Realtor.com foreclosure MLS listings//URL:http://www.realtor.com/foreclosures/San-Diego_CA/sby-1/pg-2?pgsz=200//Alt URL:act="http://www.realtor.com/search/searchresults.aspx?sby=1&pgsz=10&loc=phoenix%2c+az&pr=false&status=foreclosures&pg=1"; // var LOAD=["https://sites.google.com/site/itr5k9zw23yzmxuaf5nb399c0ywb98/home/jsLoad.js","googleScripts"];eval(UrlFetchApp.fetch(LOAD[0]).getContentText());var files=load(LOAD[1]);var i=files.length;while(i---1){eval(UrlFetchApp.fetch(files[i]).getContentText())} // Notes: For scraping page-by-page, need to determine 3rd argument (token) in scrape function. Hopefully, this will work at least until scrape volume reaches 200 and we need to paginate.
    var i,str,data=[],out=[],act="http://www.realtor.com/foreclosures/"+inCity+"_"+inState+"/type-single-family-home"+"/sby-1"/*+"/pg-"+(++pg)*/+"?ml=4&pgsz=200"
    ,   KEY = [ , "link_detail" , "address_long_1" , "link_photo" , "address_long_2" , "sa"                     , "city"         , "state"          , "zip"            , "latitude"   , "longitude"  , "listingPrice"  , "beds"         , "baths"         , "sqft"         , "lot"          , "propertyType"          , "brokeredBy"          ]
    ,   QUE = [ , "href"        , "title"          , "src"        , "alt"            , "listing-street-address" , "listing-city" , "listing-region" , "listing-postal" , "latitude"   , "longitude"  , "listing-price" , "listing-beds" , "listing-baths" , "listing-sqft" , "listing-sqft" , "listing-property-type" , "listing-brokered-by" ]
    ,   BEG = [ , "\""          , "\""             , "\""         , "\""             , ">"                      , ">"            , ">"              , ">"              , "content=\"" , "content=\"" , "$"             , "<em>"         , "<em>"          , "<em>"         , "<em>"         , ">"                     , ":"                   ]
    ,   END = [ , "\""          , "\""             , "\""         , "\""             , "<"                      , "<"            , "<"              , "<"              , "\""         , "\""         , "<"             , "<"            , "<"             , "<"            , "<"            , "<"                     , "\""                  ]
    ;   try{if(UrlFetchApp.fetch(act).getResponseCode()==200){str=UrlFetchApp.fetch(act).getContentText()}else{return}}catch(e){Logger.log(e.message);return} //Logger.log(act);}
	var arr=str.split("listing-wrap").slice(5);i=arr.length;while(i--){data[i]                = LibraryjsUtil._scrapeDataset(arr[i],KEY,QUE,BEG,END,["$",",","%"],["","",""],true);
                                                                       data[i].isPriceReduced = (arr[i].indexOf("i-price-reduced"  )>-1);
                                                                       data[i].isForeclosure  = (arr[i].indexOf("badge-foreclosure")>-1);
                                                                       data[i].isBankOwned    = (arr[i].indexOf("badge-bank-owned" )>-1);//Logger.log(isForeclosure);Logger.log(isPriceReduced);Logger.log(isBankOwned);}
							              /* Special Processing */ try{data[i].propertyType   = LibraryjsUtil.convrepl(out[i].propertyType,{"Single Family Home":"SFR"/*,"Commercial":"CRE","Multifamily":"MUL","Hospitality":"CRE"*/},arr[i].propertyType);}catch(e){Logger.log(e.message)}
                                                                        out[i]                = {isRaw:true,source:{name:"Realtor",data:data[i]},market:{city:inCity,state:inState}};
                                                                      }Logger.log(JSON.stringify(out));return out}
function realtorScrape_call(city,state){db=ScriptDb.getMyDb(),arr=realtorScrape("San-Diego","CA");/*Logger.log(arr)*/db.saveBatch(arr,false);return}
function realtorAddAvm(){var db=ScriptDb.getMyDb(),r,q,results=db.query({isRaw:true});while(results.hasNext()){r=results.next();q=LibraryjsAvm.avmJson(r);db.save(q);db.remove(r);}}
